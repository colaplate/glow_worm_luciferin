name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_draft_release:
    env:
      commitmsg: ${{ github.event.head_commit.message }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            ${{ env.commitmsg }}
          draft: true
          prerelease: false
      
  build_esp8266_firmware:
    needs: [ create_draft_release ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - id: get-id
        run: |
          id=$(echo $RELEASE_VERSION | cut -dv -f2)
          echo "::set-output name=id::$id"
      - name: Set up Python
        uses: actions/setup-python@v1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install platformio
          python --version
      - name: Install submodules
        run: |
          git submodule update --init
      - name: Setup template config files
        run: |
          cp /home/runner/work/glow_worm_luciferin/glow_worm_luciferin/secrets.ini.template /home/runner/work/glow_worm_luciferin/glow_worm_luciferin/secrets.ini
          touch .version_no_increment;
      - name: Static code analysis
        run: platformio check --verbose --severity=high --skip-packages
      - name: Run PlatformIO
        run: platformio run -e glowwormluciferinfull_esp8266
      - name: Save artifact (glowwormluciferinfull_esp8266)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp .pio/build/glowwormluciferinfull_esp8266/firmware.bin ./GlowWormLuciferinFULL_ESP8266_firmware.bin
          hub release edit -a GlowWormLuciferinFULL_ESP8266_firmware.bin -m "" "${{ env.RELEASE_VERSION }}"
      - name: Run PlatformIO
        run: platformio run -e glowwormluciferinlight_esp8266
      - name: Save artifact (glowwormluciferinlight_esp8266)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp .pio/build/glowwormluciferinlight_esp8266/firmware.bin ./GlowWormLuciferinLIGHT_ESP8266_firmware.bin
          hub release edit -a GlowWormLuciferinLIGHT_ESP8266_firmware.bin -m "" "${{ env.RELEASE_VERSION }}"

  build_esp32_firmware:
    needs: [ create_draft_release ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - id: get-id
        run: |
          id=$(echo $RELEASE_VERSION | cut -dv -f2)
          echo "::set-output name=id::$id"
      - name: Set up Python
        uses: actions/setup-python@v1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install platformio
          python --version
      - name: Install submodules
        run: |
          git submodule update --init
      - name: Setup template config files
        run: |
          cp /home/runner/work/glow_worm_luciferin/glow_worm_luciferin/secrets.ini.template /home/runner/work/glow_worm_luciferin/glow_worm_luciferin/secrets.ini
          touch .version_no_increment;
      - name: Static code analysis
        run: platformio check --verbose --severity=high --skip-packages
      - name: Run PlatformIO
        run: platformio run -e glowwormluciferinfull_esp32
      - name: Save artifact (glowwormluciferinfull_esp32)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp .pio/build/glowwormluciferinfull_esp32/firmware.bin ./GlowWormLuciferinFULL_ESP32_firmware.bin
          hub release edit -a GlowWormLuciferinFULL_ESP32_firmware.bin -m "" "${{ env.RELEASE_VERSION }}"
      - name: Run PlatformIO
        run: platformio run -e glowwormluciferinlight_esp32
      - name: Save artifact (glowwormluciferinlight_esp32)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp .pio/build/glowwormluciferinlight_esp32/firmware.bin ./GlowWormLuciferinLIGHT_ESP32_firmware.bin
          hub release edit -a GlowWormLuciferinLIGHT_ESP32_firmware.bin -m "" "${{ env.RELEASE_VERSION }}"

  create_release:
    needs: [build_esp8266_firmware, build_esp32_firmware]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
      - name: Release version
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      - id: get-id
        run: |
          id=$(echo $RELEASE_VERSION | cut -dv -f2)
          echo "::set-output name=id::$id"
      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release edit --draft=false -m "Release ${{ env.RELEASE_VERSION }}" "${{ env.RELEASE_VERSION }}"

